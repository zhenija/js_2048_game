{"version":3,"sources":["scripts/main.js"],"names":["startButton","document","querySelector","controls","score","messangeStart","messangeWin","messangeLose","cells","getElementsByClassName","rows","getElementsByTagName","arrayRows","columnsArray","createColumns","appearCell","myArray","freeCells","filter","cell","textContent","randomItem","Math","floor","random","length","x","classList","add","scoreCounter","sum","previousScore","newScore","toRight","forEach","el","i","rowCells","children","adder","moveRight","mover","toLeft","moveLeft","board","row","_","push","moveUp","toUp","moveDown","toDown","winMessange","cellsArray","remove","loseMessange","canMove","can","currentCell","prevCell","className","addEventListener","restartButton","createElement","id","append","e","key","button","includes"],"mappings":"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","file":"main.788716c6.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startButton = document.querySelector('button.start');\nconst controls = document.querySelector('.controls');\nconst score = document.querySelector('.game-score');\n\nconst messangeStart = document.querySelector('p.message.message-start');\nconst messangeWin = document.querySelector('p.message.message-win');\nconst messangeLose = document.querySelector('p.message.message-lose');\n\nconst cells = document.getElementsByClassName('field-cell');\nconst rows = document.getElementsByTagName('tr');\nconst arrayRows = [...rows];\nconst columnsArray = createColumns();\n\nfunction appearCell() {\n  const myArray = [...cells];\n\n  const freeCells = myArray.filter(cell => !cell.textContent);\n\n  const randomItem = freeCells[Math.floor(Math.random() * freeCells.length)];\n  const x = Math.random(1 - 4);\n\n  if (!freeCells.length) {\n    return;\n  }\n\n  if (x < 0.1) {\n    randomItem.textContent = '4';\n    randomItem.classList.add('field-cell--4');\n\n    return;\n  };\n  randomItem.textContent = '2';\n  randomItem.classList.add('field-cell--2');\n}\n\nfunction scoreCounter(sum) {\n  const previousScore = +score.textContent;\n  const newScore = +sum + previousScore;\n\n  score.textContent = newScore;\n};\n\nstartButton.addEventListener('click', () => {\n  appearCell();\n  appearCell();\n\n  const restartButton = document.createElement('button');\n\n  restartButton.classList.add('button', 'restart');\n  restartButton.id = 'restart';\n  restartButton.textContent = 'restart';\n  controls.append(restartButton);\n\n  startButton.remove();\n\n  restartButton.addEventListener('click', () => {\n    for (const cell of cells) {\n      cell.textContent = '';\n      cell.className = '';\n      cell.classList.add('field-cell');\n    };\n    appearCell();\n    appearCell();\n    score.textContent = '';\n    messangeLose.classList.add('hidden');\n  });\n\n  messangeStart.classList.add('hidden');\n});\n\ndocument.addEventListener('keydown', function(e) {\n  const key = e.key;\n  const button = document.querySelector('button');\n\n  switch (key) {\n    case 'ArrowRight':\n      moveRight();\n      toRight();\n      moveRight();\n      moveRight();\n      break;\n\n    case 'ArrowLeft':\n      moveLeft();\n      toLeft();\n      moveLeft();\n      moveLeft();\n      break;\n\n    case 'ArrowUp':\n      moveUp();\n      toUp();\n      moveUp();\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      toDown();\n      moveDown();\n      moveDown();\n      break;\n  }\n\n  if (button.className.includes('restart')) {\n    appearCell();\n  };\n\n  winMessange();\n  loseMessange();\n});\n\nfunction toRight() {\n  arrayRows.forEach((el) => {\n    for (let i = 3; i >= 0; i--) {\n      const rowCells = el.children;\n\n      const [prevCell, currentCell] = [rowCells[i - 1], rowCells[i]];\n\n      adder(prevCell, currentCell);\n    };\n  });\n};\n\nfunction moveRight() {\n  arrayRows.forEach((el) => {\n    for (let i = 3; i >= 0; i--) {\n      const rowCells = el.children;\n\n      const [prevCell, currentCell] = [rowCells[i - 1], rowCells[i]];\n\n      mover(prevCell, currentCell);\n    };\n  });\n};\n\nfunction toLeft() {\n  arrayRows.forEach((el) => {\n    for (let i = 0; i <= 3; i++) {\n      const rowCells = el.children;\n\n      const [prevCell, currentCell] = [rowCells[i + 1], rowCells[i]];\n\n      adder(prevCell, currentCell);\n    };\n  });\n};\n\nfunction moveLeft() {\n  arrayRows.forEach((el) => {\n    for (let i = 0; i <= 3; i++) {\n      const rowCells = el.children;\n\n      const [prevCell, currentCell] = [rowCells[i + 1], rowCells[i]];\n\n      mover(prevCell, currentCell);\n    };\n  });\n};\n\nfunction createColumns() {\n  const board = [[], [], [], []];\n\n  arrayRows.forEach((row) => {\n    const rowCells = row.children;\n\n    [...rowCells].forEach((_, i) => board[i].push(rowCells[i]));\n  });\n\n  return (board);\n};\n\nfunction moveUp() {\n  columnsArray.forEach((el) => {\n    for (let i = 0; i <= 3; i++) {\n      const [prevCell, currentCell] = [el[i + 1], el[i]];\n\n      mover(prevCell, currentCell);\n    };\n  });\n};\n\nfunction toUp() {\n  columnsArray.forEach((el) => {\n    for (let i = 0; i <= 3; i++) {\n      const [prevCell, currentCell] = [el[i + 1], el[i]];\n\n      adder(prevCell, currentCell);\n    };\n  });\n};\n\nfunction moveDown() {\n  columnsArray.forEach((el) => {\n    for (let i = 3; i >= 0; i--) {\n      const [prevCell, currentCell] = [el[i - 1], el[i]];\n\n      mover(prevCell, currentCell);\n    };\n  });\n};\n\nfunction toDown() {\n  columnsArray.forEach((el) => {\n    for (let i = 3; i >= 0; i--) {\n      const [prevCell, currentCell] = [el[i - 1], el[i]];\n\n      adder(prevCell, currentCell);\n    };\n  });\n};\n\nfunction winMessange() {\n  const cellsArray = [...cells];\n\n  for (const cell of cellsArray) {\n    if (cell.textContent === '2048') {\n      messangeWin.classList.remove('hidden');\n    }\n  }\n};\n\nfunction loseMessange() {\n  if (!canMove()) {\n    messangeLose.classList.remove('hidden');\n  }\n};\n\nfunction canMove() {\n  const myArray = [...cells];\n  const freeCells = myArray.filter(cell => !cell.textContent);\n\n  let can = 'yes';\n\n  if (!freeCells.length) {\n    arrayRows.forEach((el) => {\n      for (let i = 0; i <= 3; i++) {\n        const rowCells = el.children;\n\n        const currentCell = rowCells[i];\n        const prevCell = rowCells[i + 1];\n\n        if (prevCell) {\n          if (currentCell.textContent === prevCell.textContent) {\n            can = true;\n          }\n        }\n      }\n    });\n\n    columnsArray.forEach((el) => {\n      for (let i = 3; i >= 0; i--) {\n        const currentCell = el[i];\n        const prevCell = el[i - 1];\n\n        if (prevCell) {\n          if (currentCell.textContent === prevCell.textContent) {\n            can = true;\n          }\n        }\n      }\n    });\n\n    if (can !== true) {\n      can = false;\n    }\n  }\n\n  return can;\n};\n\nfunction mover(prevCell, currentCell) {\n  if (prevCell) {\n    if (!currentCell.textContent) {\n      currentCell.textContent = prevCell.textContent;\n      currentCell.classList = prevCell.classList;\n\n      prevCell.textContent = '';\n      prevCell.className = 'field-cell';\n    };\n  }\n};\n\nfunction adder(prevCell, currentCell) {\n  if (prevCell) {\n    if (prevCell.textContent === currentCell.textContent\n      && prevCell.textContent !== '') {\n      const sum = `${+prevCell.textContent + +currentCell.textContent}`;\n\n      currentCell.textContent = sum;\n      currentCell.classList = '';\n      currentCell.className = 'field-cell';\n\n      currentCell.classList.add(`field-cell--${currentCell.textContent}`);\n\n      prevCell.textContent = '';\n      prevCell.className = 'field-cell';\n\n      scoreCounter(sum);\n    }\n  }\n}\n"]}